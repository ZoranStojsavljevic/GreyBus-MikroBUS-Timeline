diff --git a/include/linux/greybus/greybus_manifest.h b/include/linux/greybus/greybus_manifest.h
index 6e62fe478712..821661ea7f01 100644
--- a/include/linux/greybus/greybus_manifest.h
+++ b/include/linux/greybus/greybus_manifest.h
@@ -23,6 +23,9 @@ enum greybus_descriptor_type {
        GREYBUS_TYPE_STRING             = 0x02,
        GREYBUS_TYPE_BUNDLE             = 0x03,
        GREYBUS_TYPE_CPORT              = 0x04,
+       GREYBUS_TYPE_MIKROBUS           = 0x05,
+       GREYBUS_TYPE_PROPERTY           = 0x06,
+       GREYBUS_TYPE_DEVICE             = 0x07,
 };

 enum greybus_protocol {
@@ -151,6 +154,47 @@ struct greybus_descriptor_cport {
        __u8    protocol_id;    /* enum greybus_protocol */
 } __packed;

+/*
+ * A mikrobus descriptor is used to describe the details
+ * about the bus ocnfiguration for the add-on board
+ * connected to the mikrobus port.
+ */
+struct greybus_descriptor_mikrobus {
+       __u8 pin_state[12];
+} __packed;
+
+/*
+ * A property descriptor is used to pass named properties
+ * to device drivers through the unified device properties
+ * interface under linux/property.h
+ */
+struct greybus_descriptor_property {
+       __u8 length;
+       __u8 id;
+       __u8 propname_stringid;
+       __u8 type;
+       __u8 value[0];
+} __packed;
+
+/*
+ * A device descriptor is used to describe the
+ * details required by a add-on board device
+ * driver.
+ */
+struct greybus_descriptor_device {
+       __u8 id;
+       __u8 driver_stringid;
+       __u8 protocol;
+       __u8 reg;
+       __le32 max_speed_hz;
+       __u8 irq;
+       __u8 irq_type;
+       __u8 mode;
+       __u8 prop_link;
+       __u8 gpio_link;
+       __u8 pad[3];
+} __packed;
+
 struct greybus_descriptor_header {
        __le16  size;
        __u8    type;           /* enum greybus_descriptor_type */
@@ -164,6 +208,9 @@ struct greybus_descriptor {
                struct greybus_descriptor_interface     interface;
                struct greybus_descriptor_bundle        bundle;
                struct greybus_descriptor_cport         cport;
+               struct greybus_descriptor_mikrobus      mikrobus;
+               struct greybus_descriptor_property      property;
+               struct greybus_descriptor_device        device;
        };
 } __packed;
